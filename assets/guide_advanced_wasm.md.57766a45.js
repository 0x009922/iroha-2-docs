import{_ as s,c as a,o as e,d as n}from"./app.0f261f37.js";const m='{"title":"WASM","description":"","frontmatter":{},"headers":[{"level":2,"title":"Simple Rust Smart Contract","slug":"simple-rust-smart-contract"},{"level":2,"title":"Advanced Smart Contracts: Optimising for Size","slug":"advanced-smart-contracts-optimising-for-size"}],"relativePath":"guide/advanced/wasm.md","lastUpdated":1652804524000}',o={},t=n(`<h1 id="wasm" tabindex="-1">WASM <a class="header-anchor" href="#wasm" aria-hidden="true">#</a></h1><p>While we had initially assumed that all operations within Iroha will be handled with instructions and conditionals, however, there are a few problems with this approach.</p><ul><li>The ISI syntax is verbose and ugly.</li><li>The ISI syntax is not familiar for most programmers.</li><li>While ISI smart contracts are compact (usually a few bytes), they need to be hand-optimised.</li></ul><p>In the long run, all of these problems are taken care of by using a <strong>domain-specific language</strong>, which gets optimised and compiled into a sequence of instructions that executes fast and takes very little space in the blocks, but is also easy to understand. Something that looks like your traditional <code>if</code> statements and <code>for</code> loops.</p><p>However, in the interim, we have decided to use another portable binary standard called <strong>Web assembly</strong> or <strong>WASM</strong>. The main advantage of this format is that you can use any language you like (as long as it links statically against our helper library), and produce a 32-bit portable executable. The compilers take care of the optimisation, and you don&#39;t have to learn a new language (ahem\u2026 solidity\u2026 ahem), just to operate on the blockchain.</p><p>You&#39;d still need to use ISI from inside your WASM binary to do anything on-chain, but you can do other things, and write e.g. Rust instead of composing Generic <code>structs</code> inside a macro to get conditional logic. Moreover, as long as you fit within the limits of WASM runtime, and the provided libraries, you can do anything (and everything) you want.</p><p>The drawback is that this process is a tad more involved than just writing the ISI using the client libraries.</p><h2 id="simple-rust-smart-contract" tabindex="-1">Simple Rust Smart Contract <a class="header-anchor" href="#simple-rust-smart-contract" aria-hidden="true">#</a></h2><p>WASM projects, just like any other binary in Rust need to be separate crates. Don&#39;t worry, it doesn&#39;t have to be big.</p><p>To get started you might want to use</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cargo new --lib</span></span>
<span class="line"></span></code></pre></div><p>to create a new project. Yes, we need the <code>lib</code> type, more on that later.</p><p>The <code>Cargo.toml</code> of the project should look something like this:</p><div class="language-toml"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">[</span><span style="color:#953800;">package</span><span style="color:#24292F;">]</span></span>
<span class="line"><span style="color:#24292F;">name  = </span><span style="color:#0A3069;">&quot;smartcontract&quot;</span></span>
<span class="line"><span style="color:#24292F;">version = </span><span style="color:#0A3069;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="color:#24292F;">edition = </span><span style="color:#0A3069;">&quot;2021&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">[</span><span style="color:#953800;">lib</span><span style="color:#24292F;">]</span></span>
<span class="line"><span style="color:#24292F;">crate-type = [</span><span style="color:#0A3069;">&#39;cdylib&#39;</span><span style="color:#24292F;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">[</span><span style="color:#953800;">dependencies</span><span style="color:#24292F;">]</span></span>
<span class="line"><span style="color:#24292F;">iroha_wasm = { git = </span><span style="color:#0A3069;">&quot;https://github.com/hyperledger/iroha/&quot;</span><span style="color:#24292F;">, branch = </span><span style="color:#0A3069;">&quot;iroha2&quot;</span><span style="color:#24292F;"> }</span></span>
<span class="line"></span></code></pre></div><p>Note that the crate type is <code>cdylib</code>. Most Rust code is linked in a non-portable architecture and OS-specific static manner, but WASM is a portable format. Since C ABI is the <em>lingua franca</em> of the programming world and there is no other stable Rust ABI (yet), Iroha relies on the C-linkage to generate WASM bindings. Thankfully, you don&#39;t need to worry about foreign function interface (FFI)-related problems like <code>unsafe</code>, <code>repr(C)</code>, padding, alignment etc., <code>iroha_wasm</code> takes care of all that for you.</p><p><code>iroha_wasm</code> is the crate that contains all of the bindings, macros and trait implementations that you&#39;d need to write the program, most notably the <code>iroha_wasm</code> attribute macro. The crate also exposes our <code>data_model</code> which contains all of the basic ISI and types. <code>parity-scale-codec</code> is (as of today) the chosen serialisation format with a strong possibility of getting replaced with a different (custom) serialisation format in the near future, as it seems to dominate the binary size<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><p>Now that we have the preliminaries nailed down, we get to write some code for our smart contract. In the <code>src/lib.rs</code> you should write the following:</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">#</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">[no_std]</span></span>
<span class="line"><span style="color:#24292F;">#</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">[no_main]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">extern</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">crate</span><span style="color:#24292F;"> alloc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">use</span><span style="color:#24292F;"> </span><span style="color:#953800;">alloc</span><span style="color:#CF222E;">::</span><span style="color:#953800;">vec</span><span style="color:#CF222E;">::</span><span style="color:#953800;">Vec</span><span style="color:#24292F;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">use</span><span style="color:#24292F;"> </span><span style="color:#953800;">iroha_wasm</span><span style="color:#CF222E;">::</span><span style="color:#953800;">data_model</span><span style="color:#CF222E;">::</span><span style="color:#953800;">prelude</span><span style="color:#CF222E;">::*</span><span style="color:#24292F;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">#[iroha_wasm</span><span style="color:#CF222E;">::</span><span style="color:#24292F;">iroha_wasm]</span></span>
<span class="line"><span style="color:#CF222E;">fn</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">smartcontract_entry_point</span><span style="color:#24292F;">(_account_id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">AccountId</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> query </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">QueryBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">FindAllDomains</span><span style="color:#24292F;">(</span><span style="color:#953800;">FindAllDomains</span><span style="color:#24292F;"> {});</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> domains</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Vec</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">Domain</span><span style="color:#24292F;">&gt; </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> query</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">execute</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">try_into</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">unwrap</span><span style="color:#24292F;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> domain </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> domains {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> new_account_id </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">AccountId</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Name</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;mad_hatter&quot;</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">unwrap</span><span style="color:#24292F;">(),</span></span>
<span class="line"><span style="color:#24292F;">            domain_id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> domain</span><span style="color:#CF222E;">.</span><span style="color:#24292F;">id,</span></span>
<span class="line"><span style="color:#24292F;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#953800;">Instruction</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Register</span><span style="color:#24292F;">(</span><span style="color:#953800;">RegisterBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">NewAccount</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(new_account_id)))</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">execute</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p><code>cargo run --release</code> will submit the instruction and run it for you (be sure to have a peer up).</p><p>What this smart contract does is query all of the currently existing domains, put the results into a <code>std::vec::Vec</code>, which in this case has to be imported from <code>alloc</code>, as we use <code>no_std</code> (more on that later), which is then used to add the user named <code>mad_hatter</code> to all of the existing domains.</p><p>Building the same logic out of <code>Expression</code> and <code>If</code> and <code>Sequence</code> would be significantly harder. Moreover, the actual low-level instructions that would run are very likely not going to be as well-optimised as what the compiler produces.</p><h2 id="advanced-smart-contracts-optimising-for-size" tabindex="-1">Advanced Smart Contracts: Optimising for Size <a class="header-anchor" href="#advanced-smart-contracts-optimising-for-size" aria-hidden="true">#</a></h2><p>WASM smart contracts can get big. So big, in fact, that we might not let you store them in the blockchain. So how do you reduce the size? The most important modifications are done in <code>Cargo.toml</code>:</p><div class="language-toml"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">[</span><span style="color:#953800;">profile</span><span style="color:#24292F;">.</span><span style="color:#953800;">release</span><span style="color:#24292F;">]</span></span>
<span class="line"><span style="color:#24292F;">strip = </span><span style="color:#0A3069;">&quot;debuginfo&quot;</span><span style="color:#24292F;"> </span><span style="color:#6E7781;"># Remove debugging info from the binary</span></span>
<span class="line"><span style="color:#24292F;">panic = </span><span style="color:#0A3069;">&quot;abort&quot;</span><span style="color:#24292F;">     </span><span style="color:#6E7781;"># Panics are transcribed to Traps when compiling for wasm anyways</span></span>
<span class="line"><span style="color:#24292F;">lto = </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">          </span><span style="color:#6E7781;"># Link-time-optimisation produces notable decrease in binary size</span></span>
<span class="line"><span style="color:#24292F;">opt-level = </span><span style="color:#0A3069;">&quot;z&quot;</span><span style="color:#24292F;">     </span><span style="color:#6E7781;"># Optimise for size vs speed with &quot;s&quot;/&quot;z&quot;(removes vectorization)</span></span>
<span class="line"><span style="color:#24292F;">codegen-units = </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">   </span><span style="color:#6E7781;"># Further reduces binary size but increases compilation time</span></span>
<span class="line"></span></code></pre></div><p>Rust stores a lot of debug information (even when compiled in <code>release</code> mode), which is (as the name suggests) used for debugging a panic in your Rust application. As you would expect, this information increases the size of the compiled WASM significantly. Normally, this would be a worthwhile trade-off, but not in our case. Firstly, since the WASM is stored on-chain, it will be permanently recorded in some block and take space on every full node of an Iroha network (which by the way, stores a lot of its information in RAM), so storage space for WASM is at a premium. Secondly, once the WASM smart contract is stored on-chain, the debug information is no longer accessible. Indeed, you shouldn&#39;t debug on a peer. Instead, you should replicate the conditions that caused the panic locally and debug on your personal machine.</p><p>Another step that we&#39;ve already taken involves working under a <code>no_std</code> environment. All of our size-related woes stem from Rust being predominantly statically linked. As such, breaking the standard library into more manageable crates, like using <code>alloc::vec</code> instead of <code>std::vec</code> can help us reduce the size and compilation time<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p><p>Next, you&#39;re advised to re-compile <code>libcore</code> and any other standard library crate (e.g. <code>alloc</code>) to exclude the leftover panic-related code that comes with prebuilt the <code>core</code> library<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cargo +nightly build -Z build-std -Z build-std-features=panic_immediate_abort --target wasm32-unknown-unknown</span></span>
<span class="line"></span></code></pre></div><p>Unfortunately, this is an unstable feature. In other words, the developers of the Rust programming language can decide to change how this works, or remove this option entirely.</p><p>Finally, you can use an automated tool to optimise the size of the WASM using <a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noopener noreferrer"><code>wasm-opt</code></a>, or use <a href="https://rustwasm.github.io/twiggy/" target="_blank" rel="noopener noreferrer"><code>twiggy</code></a> to guide your manual optimisation efforts. Using <code>wasm-opt</code> is highly advised because it will often significantly reduce your binary size, e.g.:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">wasm-opt -Os -o output.wasm input.wasm</span></span>
<span class="line"></span></code></pre></div><p>At some, point, unfortunately, the smallest size of your WASM blob is going to be determined by the libraries that you need to use. Using all of the above steps on the provided smart contract, can reduce it down to a manageable (for the blockchain) size. Stay tuned for RC3 for further optimisations of binary size.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Size is an important metric. We shall cover size-optimisation strategies as we go. <a href="#fnref1" class="footnote-backref">\u21A9\uFE0E</a></p></li><li id="fn2" class="footnote-item"><p>It should be noted, that excluding the standard library is necessary for compiling to the wasm32 target, and is thus mandatory. <a href="#fnref2" class="footnote-backref">\u21A9\uFE0E</a></p></li><li id="fn3" class="footnote-item"><p><code>wasm-opt</code> can also be used to remove the debug sections. <a href="#fnref3" class="footnote-backref">\u21A9\uFE0E</a></p></li></ol></section>`,34),l=[t];function r(p,i,c,d,y,h){return e(),a("div",null,l)}var f=s(o,[["render",r]]);export{m as __pageData,f as default};
