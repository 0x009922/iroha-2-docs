import{_ as e,c as t,o as i,d as o}from"./app.0f261f37.js";const m='{"title":"Registering and Unregistering peers","description":"","frontmatter":{},"headers":[{"level":2,"title":"Public Blockchain","slug":"public-blockchain"},{"level":2,"title":"Private Blockchain","slug":"private-blockchain"}],"relativePath":"guide/appendix/register-unregister.md","lastUpdated":1652804524000}',r={},n=o('<h1 id="registering-and-unregistering-peers" tabindex="-1">Registering and Unregistering peers <a class="header-anchor" href="#registering-and-unregistering-peers" aria-hidden="true">#</a></h1><h2 id="public-blockchain" tabindex="-1">Public Blockchain <a class="header-anchor" href="#public-blockchain" aria-hidden="true">#</a></h2><p>With any luck, if you followed the guide, you have a well-functioning network that people want to join. Naturally, in a public blockchain, joining is a matter of installing the correct software and waiting until your node gets discovered.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Peer discovery is under construction.</p></div><h2 id="private-blockchain" tabindex="-1">Private Blockchain <a class="header-anchor" href="#private-blockchain" aria-hidden="true">#</a></h2><p>In a bank setting, allowing everyone to join at their leisure is a security nightmare. For safety, automatic discovery of peers is turned off for Iroha 2 in the private blockchain configuration. To add a peer to the network, it must be manually registered. To do that, the user that registers the peer must have the appropriate <code>PermissionToken</code>. This could be granted as part of a <code>role</code>, or as part of a one-time allowance. Granting roles makes sense if a user is to serve as an administrator of sorts, where it&#39;s their responsibility to maintain the peers in the network long-term. A one-time permission grant is useful when the party registering the peer isn&#39;t responsible for registering peers in general, but the network administrator doesn&#39;t need to (or want to) spend time setting up a new peer.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Permissions for registering a peer are under construction.</p></div><p>After permissions, the new peer must be set up. It&#39;s a good idea to request some information about the peers&#39; configuration in the network. Your best friend is the <code>configuration</code> endpoint of the API socket. Thus far querying is done only manually. In the next release we plan to implement a <a href="https://github.com/hyperledger/iroha/issues/1184" title="#1184" target="_blank" rel="noopener noreferrer">bootstrapping procedure</a>, but for now you&#39;ll have to manually check that the timeouts and batch sizes match. To simplify the process, you can ask the network administrator for a redacted version of <code>config.json</code>, which excludes privileged information, such as <code>PRIVATE_KEY</code>s.</p><p><em>After</em> your peer is running. You should submit the <em>register peer</em> instruction. The peer will go through the handshake process and start chatting with the network.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Submitting a <code>Register&lt;Peer&gt;</code> instruction <strong>doesn&#39;t</strong> (and cannot) instantiate a <em>new peer process</em>.</p></div><p>What about unregistering peers? For security reasons this process is one-sided. The network reaches consensus that it wants to remove a peer, but the peer itself doesn&#39;t know much about why nobody&#39;s talking to it. We might add an optional feature that will detect if the <code>Unregister&lt;Peer&gt;</code> instruction contains the public key of the peer itself and remove the connection from all other peers, but this is not suitable for all cases. In most circumstances, if you want to unregister a peer, you want to do so, because it is a Byzantine fault. Just &quot;ghosting&quot; this peer makes the life of the malicious actor on the network harder.</p>',11),s=[n];function a(c,h,l,d,u,p){return i(),t("div",null,s)}var f=e(r,[["render",a]]);export{m as __pageData,f as default};
